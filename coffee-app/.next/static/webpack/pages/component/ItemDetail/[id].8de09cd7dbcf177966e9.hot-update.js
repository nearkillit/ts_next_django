"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/component/ItemDetail/[id]",{

/***/ "./src/api/axios.ts":
/*!**************************!*\
  !*** ./src/api/axios.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"signUpByApi\": function() { return /* binding */ signUpByApi; },\n/* harmony export */   \"cartUpdateByApi\": function() { return /* binding */ cartUpdateByApi; },\n/* harmony export */   \"cartDeleteByApi\": function() { return /* binding */ cartDeleteByApi; },\n/* harmony export */   \"loginByApi\": function() { return /* binding */ loginByApi; },\n/* harmony export */   \"addOrderByApi\": function() { return /* binding */ addOrderByApi; },\n/* harmony export */   \"getOrdersByApi\": function() { return /* binding */ getOrdersByApi; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n// export const getItemByApi = async () => {\n//     let getData = { Coffee:[], Topping:[]}\n//     await new Promise((resolve, reject) => {\n//       axios.get('http://127.0.0.1:8000/api/coffee/'          \n//       ).then(res =>{          \n//           getData.Coffee = res.data  \n//           axios.get('http://127.0.0.1:8000/api/topping/'          \n//           ).then(_res =>{            \n//             getData.Topping = _res.data            \n//             resolve(_res)            \n//           })               \n//       })  \n//     })        \n//     return getData\n// }\nconst signUpByApi = async data => {\n  return await new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios__WEBPACK_IMPORTED_MODULE_0___default().post('http://localhost:8000/api/rest-auth/registration/', data);\n      const res2 = await axios__WEBPACK_IMPORTED_MODULE_0___default().post('http://127.0.0.1:8000/api/cart/', res.data, {\n        headers: {\n          Authorization: `JWT ${res.data.token}`\n        }\n      });\n      alert('新規登録が完了しました。ログイン画面よりログインしてください。');\n      resolve({\n        user: {\n          id: res.data.user.id,\n          email: res.data.user.email,\n          token: res.data.token\n        },\n        cart: res2.data\n      });\n    } catch (err) {\n      alert('パスワードは8文字以上必要です。');\n      reject(err);\n    }\n  });\n};\nconst cartUpdateByApi = async data => {\n  return await new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios__WEBPACK_IMPORTED_MODULE_0___default().post('http://localhost:8000/api/ordercoffee/', data.cart, {\n        headers: {\n          Authorization: `JWT ${data.token}`\n        }\n      });\n      const newTop = data.topping.map(t => {\n        t.cart = res.data.id;\n        return t;\n      });\n      const res1 = await axios__WEBPACK_IMPORTED_MODULE_0___default().post('http://localhost:8000/api/ordertoppings/', newTop, {\n        headers: {\n          Authorization: `JWT ${data.token}`\n        }\n      });\n      resolve({\n        cart: res,\n        topping: res1\n      });\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\nconst cartDeleteByApi = async data => {\n  return await new Promise(async (resolve, reject) => {\n    try {\n      await axios__WEBPACK_IMPORTED_MODULE_0___default().delete('http://localhost:8000/api/ordercoffee/' + data.cart.id + '/', {\n        data: {\n          id: data.cart.id\n        },\n        headers: {\n          Authorization: `JWT ${data.token}`\n        }\n      });\n      resolve(\"ok delete\");\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\nconst loginByApi = async data => {\n  let userData = {\n    user: {\n      user_id: '',\n      email: '',\n      token: ''\n    },\n    cart: [],\n    order: [],\n    ordercart: [],\n    ordertopping: []\n  };\n  return await new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios__WEBPACK_IMPORTED_MODULE_0___default().post('http://localhost:8000/api/rest-auth/login/', {\n        email: data.email,\n        password: data.password\n      });\n      userData.user.user_id = res.data.user.id;\n      userData.user.email = res.data.user.email;\n      userData.user.token = res.data.token;\n      const res1 = await axios__WEBPACK_IMPORTED_MODULE_0___default().get('http://127.0.0.1:8000/api/cart/', {\n        headers: {\n          Authorization: `JWT ${res.data.token}`\n        }\n      });\n\n      if (res1.data.length === 0) {\n        const res2 = await axios__WEBPACK_IMPORTED_MODULE_0___default().post('http://127.0.0.1:8000/api/cart/', res.data, {\n          headers: {\n            Authorization: `JWT ${res.data.token}`\n          }\n        });\n        userData.cart[0] = {\n          id: res2.data.id\n        };\n      } else {\n        // cart を持ってくる処理\n        userData.cart = res1.data; // orderers　を持ってくる\n\n        const _res = await axios__WEBPACK_IMPORTED_MODULE_0___default().get('http://127.0.0.1:8000/api/orderers/', {\n          headers: {\n            Authorization: `JWT ${res.data.token}`\n          }\n        });\n\n        userData.order = _res.data; // ordercart を持ってくる処理\n\n        const __res = await axios__WEBPACK_IMPORTED_MODULE_0___default().get('http://127.0.0.1:8000/api/ordercoffee/', {\n          params: res1.data\n        });\n\n        userData.ordercart = __res.data;\n\n        const ___res = await axios__WEBPACK_IMPORTED_MODULE_0___default().get('http://127.0.0.1:8000/api/ordertopping/', {\n          params: __res.data\n        });\n\n        userData.ordertopping = ___res.data;\n      }\n\n      resolve(userData);\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n// あとカートの追加をする\nconst addOrderByApi = async data => {\n  return await new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios__WEBPACK_IMPORTED_MODULE_0___default().post('http://127.0.0.1:8000/api/orderers/', data.order, {\n        headers: {\n          Authorization: `JWT ${data.token}`\n        }\n      }); // loginと同じ処理をする　↓\n      // const res2 = await axios.post('http://127.0.0.1:8000/api/cart/', data,{\n      //     headers: {\n      //         Authorization: `JWT ${data.token}`\n      //     }\n      // })\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\nconst getOrdersByApi = async token => {\n  return await new Promise((resolve, reject) => {\n    axios__WEBPACK_IMPORTED_MODULE_0___default().get('http://127.0.0.1:8000/api/orderers/', {\n      headers: {\n        Authorization: `JWT ${token}`\n      }\n    }).then(_res => {\n      resolve(_res);\n    }).catch(_err => {\n      reject(_err);\n    });\n  });\n};\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/api/axios.ts\n");

/***/ })

});
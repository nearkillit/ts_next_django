{"ast":null,"code":"const mailGenerator = require('../mail/mail');\n/**\n * Connection\n * client connection that handles io\n *\n * @class Connection\n */\n\n\nclass Connection {\n  constructor(socket, options = {}) {\n    this.socket = socket;\n    this.logger = options.logger;\n    this.schema = options.schema;\n    this.parser = options.parser;\n    this.data = false;\n    this.done = false;\n    this.mail = mailGenerator();\n\n    this.send = message => {\n      this.socket.write(message);\n    };\n\n    this.schema.connect(this.socket);\n    this.send('220 localhost Simple Mail Transfer Service Ready\\r\\n');\n    this.socket.on('data', this.onData.bind(this));\n    this.socket.on('close', () => {\n      this.socket.destroy();\n    });\n  }\n\n  onData(buffer) {\n    const line = buffer.toString();\n    this.parse(line);\n  }\n\n  parse(line = '') {\n    const {\n      action,\n      params\n    } = this.parser(line);\n    return this.run(line, action, params);\n  }\n\n  runData(line) {\n    if (line === '\\r\\n.\\r\\n' || line === '.\\r\\n') {\n      this.data = false;\n      return this.done = true;\n    }\n\n    return this.mail.addMessage(line);\n  }\n\n  async run(line, action, params) {\n    if (this.schema[action]) {\n      await this.schema[action]({\n        action,\n        params\n      });\n    }\n\n    if (action === 'EHLO') {\n      return this.send('250 smtp.example.com, Hi! you sent me a EHLO\\r\\n');\n    }\n\n    if (action === 'HELO') {\n      return this.send('250 smtp.example.com, I am glad to meet you\\r\\n');\n    }\n\n    if (action === 'MAIL FROM') {\n      this.mail.setFromSender(params);\n      return this.send('250 Ok\\r\\n');\n    }\n\n    if (action === 'RCPT TO') {\n      this.mail.addRecipient(params);\n      return this.send('250 Ok\\r\\n');\n    }\n\n    if (action === 'DATA') {\n      // new thing we have to run\n      this.data = true;\n      return this.send('354 End data with <CR><LF>.<CR><LF>\\r\\n');\n    }\n\n    if (action === 'QUIT') {\n      return this.send('221 Bye\\r\\n'); // close connection\n    }\n\n    if (this.data) {\n      this.runData(line);\n\n      if (this.done) {\n        return this.send('250 Ok: queued as 12345\\r\\n');\n      }\n    }\n\n    if (action === 'VRFY') {\n      return this.send('252 The recipient cannot be verified\\r\\n');\n    }\n  }\n\n  getMail() {\n    return this.mail.getMail();\n  }\n\n}\n\nmodule.exports = Connection;","map":{"version":3,"sources":["/Users/kiritoshimura/Desktop/coffee-app/node_modules/smtpjs/src/smtp/connection/Connection.js"],"names":["mailGenerator","require","Connection","constructor","socket","options","logger","schema","parser","data","done","mail","send","message","write","connect","on","onData","bind","destroy","buffer","line","toString","parse","action","params","run","runData","addMessage","setFromSender","addRecipient","getMail","module","exports"],"mappings":"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","sourcesContent":["const mailGenerator = require('../mail/mail')\n\n/**\n * Connection\n * client connection that handles io\n *\n * @class Connection\n */\nclass Connection {\n  constructor (socket, options = {}) {\n    this.socket = socket\n    this.logger = options.logger\n    this.schema = options.schema\n    this.parser = options.parser\n    this.data = false\n    this.done = false\n    this.mail = mailGenerator()\n    this.send = (message) => {\n      this.socket.write(message)\n    }\n\n    this.schema.connect(this.socket)\n    this.send('220 localhost Simple Mail Transfer Service Ready\\r\\n')\n\n    this.socket.on('data', this.onData.bind(this))\n    this.socket.on('close', () => {\n      this.socket.destroy()\n    })\n  }\n\n  onData (buffer) {\n    const line = buffer.toString()\n\n    this.parse(line)\n  }\n\n  parse (line = '') {\n    const { action, params } =  this.parser(line)\n\n    return this.run(line, action, params)\n  }\n\n  runData (line) {\n    if (line === '\\r\\n.\\r\\n' || line === '.\\r\\n') {\n      this.data = false\n\n      return this.done = true\n    }\n\n    return this.mail.addMessage(line)\n  }\n\n  async run (line, action, params) {\n    if (this.schema[action]) {\n      await this.schema[action]({\n        action,\n        params,\n      })\n    }\n\n    if (action === 'EHLO') {\n      return this.send('250 smtp.example.com, Hi! you sent me a EHLO\\r\\n')\n    }\n\n    if (action === 'HELO') {\n      return this.send('250 smtp.example.com, I am glad to meet you\\r\\n')\n    }\n\n    if (action === 'MAIL FROM') {\n      this.mail.setFromSender(params)\n      return this.send('250 Ok\\r\\n')\n    }\n\n    if (action === 'RCPT TO') {\n      this.mail.addRecipient(params)\n      return this.send('250 Ok\\r\\n')\n    }\n\n    if (action === 'DATA') {\n      // new thing we have to run\n      this.data = true\n      return this.send('354 End data with <CR><LF>.<CR><LF>\\r\\n')\n    }\n\n    if (action === 'QUIT') {\n      return this.send('221 Bye\\r\\n')\n      // close connection\n    }\n\n    if (this.data) {\n      this.runData(line)\n\n      if (this.done) {\n        return this.send('250 Ok: queued as 12345\\r\\n')\n      }\n    }\n\n    if (action === 'VRFY') {\n      return this.send('252 The recipient cannot be verified\\r\\n')\n    }\n  }\n\n  getMail () {\n    return this.mail.getMail()\n  }\n}\n\nmodule.exports = Connection"]},"metadata":{},"sourceType":"script"}
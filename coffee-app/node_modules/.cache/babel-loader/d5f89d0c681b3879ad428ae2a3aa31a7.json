{"ast":null,"code":"const _ = require('lodash');\n\nconst {\n  COMMANDS\n} = require('../constants');\n\nconst Logger = require('../logger/Logger');\n\nconst Schema = require('../schema/Schema');\n\nconst shortid = require('shortid');\n\nconst tls = require('tls');\n\nconst fs = require('fs');\n\nconst net = require('net');\n\nconst Connection = require('../connection/Connection.js');\n\nconst ENV = process.env.NODE_ENV;\nconst isDev = ENV === undefined || ENV === 'development';\nconst server = isDev ? net : tls;\nconst commandsRegexStr = `^(${COMMANDS.join('|')}):? ?(.*)`;\nconst commandsRegex = new RegExp(commandsRegexStr);\n\nclass Server {\n  constructor(schema, dependencies = {}) {\n    const {\n      serverOptions,\n      ip,\n      port\n    } = this.getOptions(schema);\n\n    if (!dependencies.logger) {\n      const loggerOptions = _.get(schema, 'logger', {});\n\n      dependencies.logger = new Logger(loggerOptions);\n    }\n\n    this.logger = dependencies.logger;\n    this.schema = schema;\n    this.connections = {};\n    this.server = server.createServer(serverOptions, this.createServerHandler.bind(this));\n    this.server.listen(port, ip);\n    this.logger.log(`Server start on ip: ${ip} port: ${port}`);\n  }\n\n  static factory(schema, dependencies = {}) {\n    return new Server(schema, dependencies);\n  }\n\n  getOptions(schema = {}) {\n    const key = _.get(schema, 'config.key', '');\n\n    const cert = _.get(schema, 'config.cert', '');\n\n    const ip = _.get(schema, 'config.ip', '127.0.0.1');\n\n    const port = _.get(schema, 'config.port', 1337);\n\n    return {\n      serverOptions: {\n        key,\n        cert\n      },\n      ip,\n      port\n    };\n  }\n\n  createServerHandler(socket) {\n    const id = shortid.generate();\n    socket.id = id;\n    const parser = Server.parser;\n    const logger = this.logger;\n    const schema = Schema.factory(this.schema, {\n      logger\n    });\n    const connection = new Connection(socket, {\n      logger,\n      parser,\n      schema\n    });\n    this.connections[id] = connection;\n    socket.on('error', e => {\n      schema.error(e, connection.getMail());\n    });\n    socket.on('close', args => {\n      const id = socket.id || '';\n      this.removeId(id); // todo pass connection and mail\n\n      return schema.done(connection.getMail());\n    });\n  }\n\n  static parser(line = '') {\n    const parsed = commandsRegex.exec(line);\n    let full = '';\n    let action = '';\n    let params = '';\n\n    if (parsed && parsed.length) {\n      full = parsed[0], action = parsed[1], params = parsed[2];\n    }\n\n    return {\n      full,\n      action,\n      params\n    };\n  }\n\n  getServer() {\n    return this.server;\n  }\n\n  removeId(id) {\n    delete this.connections[id];\n  }\n  /* debugging methods below */\n\n\n  send(id, line) {\n    this.connections[id].parse(line);\n  }\n\n  list() {\n    return Object.keys(this.connections);\n  }\n\n  getMail(id) {\n    return this.connections[id] && this.connections[id].getMail();\n  }\n\n  getConnectionCount() {\n    return new Promise((resolve, reject) => {\n      this.server.getConnections((error, count) => {\n        if (error) {\n          // this.logger.fatal(error)\n          return reject(error);\n        }\n\n        return resolve(count);\n      });\n    });\n  }\n  /* end debugging code */\n\n\n}\n\nmodule.exports = Server;","map":{"version":3,"sources":["/Users/kiritoshimura/Desktop/coffee-app/node_modules/smtpjs/src/smtp/server/Server.js"],"names":["_","require","COMMANDS","Logger","Schema","shortid","tls","fs","net","Connection","ENV","process","env","NODE_ENV","isDev","undefined","server","commandsRegexStr","join","commandsRegex","RegExp","Server","constructor","schema","dependencies","serverOptions","ip","port","getOptions","logger","loggerOptions","get","connections","createServer","createServerHandler","bind","listen","log","factory","key","cert","socket","id","generate","parser","connection","on","e","error","getMail","args","removeId","done","line","parsed","exec","full","action","params","length","getServer","send","parse","list","Object","keys","getConnectionCount","Promise","resolve","reject","getConnections","count","module","exports"],"mappings":"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","sourcesContent":["const _ = require('lodash')\nconst { COMMANDS } = require('../constants')\nconst Logger = require('../logger/Logger')\nconst Schema = require('../schema/Schema')\nconst shortid = require('shortid')\nconst tls = require('tls')\nconst fs = require('fs')\nconst net = require('net')\nconst Connection = require('../connection/Connection.js')\n\nconst ENV = process.env.NODE_ENV\nconst isDev = ENV === undefined || ENV === 'development'\nconst server = isDev? net: tls\nconst commandsRegexStr = `^(${COMMANDS.join('|')}):? ?(.*)`\nconst commandsRegex = new RegExp(commandsRegexStr)\n\nclass Server {\n  constructor (schema, dependencies = {}) {\n    const { serverOptions, ip, port } = this.getOptions(schema)\n\n    if (!dependencies.logger) {\n      const loggerOptions = _.get(schema, 'logger', {})\n      dependencies.logger = new Logger(loggerOptions)\n    }\n\n    this.logger = dependencies.logger\n    this.schema = schema\n    this.connections = {}\n    this.server = server.createServer(serverOptions, this.createServerHandler.bind(this))\n    this.server.listen(port, ip)\n    this.logger.log(`Server start on ip: ${ip} port: ${port}`)\n  }\n\n  static factory (schema, dependencies = {}) {\n    return new Server(schema, dependencies)\n  }\n\n  getOptions (schema = {}) {\n    const key = _.get(schema, 'config.key', '')\n    const cert = _.get(schema, 'config.cert', '')\n    const ip = _.get(schema, 'config.ip', '127.0.0.1')\n    const port = _.get(schema, 'config.port', 1337)\n\n    return {\n      serverOptions: { key, cert },\n      ip,\n      port,\n    }\n  }\n\n  createServerHandler (socket) {\n    const id = shortid.generate()\n    socket.id = id\n    const parser = Server.parser\n    const logger = this.logger\n    const schema = Schema.factory(this.schema, { logger })\n    const connection = new Connection(socket, { logger, parser, schema })\n\n    this.connections[id] = connection\n\n    socket.on('error', (e) => {\n      schema.error(e, connection.getMail())\n    })\n\n    socket.on('close', (args) => {\n      const id = socket.id || ''\n      this.removeId(id)\n\n      // todo pass connection and mail\n      return schema.done(connection.getMail())\n    })\n  }\n\n  static parser (line = '') {\n    const parsed = commandsRegex.exec(line)\n    let full = ''\n    let action = ''\n    let params = ''\n\n    if (parsed && parsed.length) {\n      full = parsed[0],\n      action = parsed[1],\n      params = parsed[2]\n    }\n\n    return {\n      full,\n      action,\n      params,\n    }\n  }\n\n  getServer () {\n    return this.server\n  }\n\n  removeId (id) {\n    delete this.connections[id]\n  }\n\n  /* debugging methods below */\n  send (id, line) {\n    this.connections[id].parse(line)\n  }\n\n  list () {\n    return Object.keys(this.connections)\n  }\n\n  getMail (id) {\n    return this.connections[id] && this.connections[id].getMail()\n  }\n\n  getConnectionCount () {\n    return new Promise((resolve, reject) => {\n      this.server.getConnections((error, count) => {\n        if (error) {\n          // this.logger.fatal(error)\n          return reject(error)\n        }\n\n        return resolve(count)\n      })\n    })\n  }\n  /* end debugging code */\n}\n\nmodule.exports = Server"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"const _ = require('lodash');\n\nconst util = require('util');\n\nconst kleur = require('kleur');\n\nconst LOG_LEVELS = {\n  'fatal': {\n    value: 50,\n    mapping: 'error'\n  },\n  'error': {\n    value: 40,\n    mapping: 'error'\n  },\n  'warn': {\n    value: 30,\n    mapping: 'warn'\n  },\n  'info': {\n    value: 20,\n    mapping: 'info'\n  },\n  'log': {\n    value: 20,\n    mapping: 'log'\n  },\n  'debug': {\n    value: 10,\n    mapping: 'debug'\n  },\n  'all': {\n    value: 0,\n    mapping: 'log'\n  }\n};\nconst COLOR_MAPPINGS = {\n  'fatal': kleur.red().inverse,\n  'error': kleur.red,\n  'warn': kleur.yellow,\n  'info': kleur.green,\n  'log': kleur.green,\n  'debug': kleur.magenta\n};\n\nclass Logger {\n  /**\n   * options object\n   *  {\n   *    level: 'warn',\n   *  }\n   * @param {Object} options - options object\n   */\n  constructor(options = {}) {\n    const noop = () => {};\n\n    this.level = _.get(options, 'level', 'all');\n    this.logger = _.get(options.logger) || console;\n    this.debug = noop;\n    this.log = noop;\n    this.info = noop;\n    this.warn = noop;\n    this.error = noop;\n    this.fatal = noop;\n\n    const levelValue = _.get(LOG_LEVELS, `${this.level}.value`, LOG_LEVELS['fatal'].value);\n\n    console.log(\"Logger -> noop -> levelValue\", levelValue); // only add logging methods based on logging level\n\n    Object.entries(LOG_LEVELS).forEach(([key, level]) => {\n      if (levelValue <= level.value) {\n        this[key] = (...message) => {\n          this.logger[level.mapping](Logger.formatted(key, ...message));\n          return message;\n        };\n      }\n    });\n  }\n\n  static formatted(type = '', ...message) {\n    const msg = message.reduce((accumulator, msg) => {\n      if (typeof msg === 'object') {\n        msg = `${util.inspect(msg, {\n          showHidden: false,\n          depth: 2,\n          colors: kleur.enabled,\n          breakLength: Number.POSITIVE_INFINITY\n        })}`;\n      }\n\n      accumulator += `${msg} `;\n      return accumulator;\n    }, '');\n    const timestamp = kleur.grey(`[${new Date().toISOString()}]`);\n    const levelColor = COLOR_MAPPINGS[type];\n    const level = `[${type.toUpperCase()}]`.padEnd(7);\n    return `${timestamp} ${levelColor(level)} - ${msg}`;\n  }\n\n}\n\nmodule.exports = Logger;","map":{"version":3,"sources":["/Users/kiritoshimura/Desktop/coffee-app/node_modules/smtpjs/src/smtp/logger/Logger.js"],"names":["_","require","util","kleur","LOG_LEVELS","value","mapping","COLOR_MAPPINGS","red","inverse","yellow","green","magenta","Logger","constructor","options","noop","level","get","logger","console","debug","log","info","warn","error","fatal","levelValue","Object","entries","forEach","key","message","formatted","type","msg","reduce","accumulator","inspect","showHidden","depth","colors","enabled","breakLength","Number","POSITIVE_INFINITY","timestamp","grey","Date","toISOString","levelColor","toUpperCase","padEnd","module","exports"],"mappings":"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","sourcesContent":["const _ = require('lodash')\nconst util = require('util')\nconst kleur = require('kleur')\n\nconst LOG_LEVELS = {\n  'fatal': { value: 50, mapping: 'error' },\n  'error': { value: 40, mapping: 'error' },\n  'warn': { value: 30, mapping: 'warn' },\n  'info': { value: 20, mapping: 'info' },\n  'log': { value: 20, mapping: 'log' },\n  'debug': { value: 10, mapping: 'debug' },\n  'all': { value: 0, mapping: 'log' },\n}\n\nconst COLOR_MAPPINGS = {\n  'fatal': kleur.red().inverse,\n  'error': kleur.red,\n  'warn': kleur.yellow,\n  'info': kleur.green,\n  'log': kleur.green,\n  'debug': kleur.magenta,\n}\n\nclass Logger {\n  /**\n   * options object\n   *  {\n   *    level: 'warn',\n   *  }\n   * @param {Object} options - options object\n   */\n  constructor (options = {}) {\n    const noop = () => {}\n\n    this.level = _.get(options, 'level', 'all')\n    this.logger = _.get(options.logger) || console\n\n    this.debug = noop\n    this.log = noop\n    this.info = noop\n    this.warn = noop\n    this.error = noop\n    this.fatal = noop\n\n    const levelValue = _.get(LOG_LEVELS, `${this.level}.value`, LOG_LEVELS['fatal'].value)\n    console.log(\"Logger -> noop -> levelValue\", levelValue)\n\n\n    // only add logging methods based on logging level\n    Object.entries(LOG_LEVELS).forEach(([key, level]) => {\n      if (levelValue <= level.value) {\n        this[key] = (...message) => {\n          this.logger[level.mapping](Logger.formatted(key, ...message))\n          return message\n        }\n      }\n    })\n  }\n\n  static formatted (type = '', ...message) {\n    const msg = message.reduce((accumulator, msg) => {\n      if (typeof msg === 'object') {\n        msg = `${util.inspect(msg, { showHidden: false, depth: 2, colors: kleur.enabled, breakLength: Number.POSITIVE_INFINITY })}`\n      }\n\n      accumulator += `${msg} `\n\n      return accumulator\n    }, '')\n\n    const timestamp = kleur.grey(`[${new Date().toISOString()}]`)\n    const levelColor = COLOR_MAPPINGS[type]\n    const level = `[${type.toUpperCase()}]`.padEnd(7)\n\n    return `${timestamp} ${levelColor(level)} - ${msg}`\n  }\n}\n\nmodule.exports = Logger\n"]},"metadata":{},"sourceType":"script"}